Array Data Structure

--> An array is a collection of similar items stored in contiguous memory location. It allows the efficient access to the
    elements using indices.
    Array in java are objects and must be declared before use.

    `For java`
    Syntax --> data_type name[] = new data_type[size];


___0______1_____2_____3_____4___} ------- Indexes
|__10__|__5__|__1__|__0__|__3__|}-------- Values


Static array  --> It allocates the memory at compile time and it's size is fixed.
Dynamic array  --> It automatically grows when we try to make a new insertion.

Array Operations

    i.   Traversal : Visiting each element of an array in a specific order (e.g., sequential, reverse).
    ii.  Insertion : Adding a new element to an array at a specific index.Insertion in an array can be problematic due to the fixed size of arrays and the need to shift elements to make space for the new element.
    iii. Deletion : Removing an element from an array at a specific index.
    iv.  Searching : Finding the index of an element in an array.


--------------------------------------------------------/.....................................................................

Traversal code representation in Java 
--------------------------------------
//Array Initialization
int arr[] = {3,5,1,7,10};
//Traversing each element of the array
for (int i=0; i<arr.length;i++){
    System.out.println(arr[i]);
}
--------------------------------------------------------/.....................................................................
Insertion of an element in an array
------------------------------------

-->Since arrays have a fixed size, you cannot insert an element in the middle without shifting the subsequent elements.

//Array Initialization
int[] arr = {10,20,30,40,50};
int position = 2 //position to insert new element
int newElement = 25

//Shifting elements to the right side which eventually cost to overwriting the last element because the size is fixed.
for(int i=arr.length-1; i>position;i--){
    arr[i] = arr[i-1];
}
arr[position] = newElement;
for (int num : arr) {
    System.out.println(num);
}
--------------------------------------------------------/.....................................................................
Deletion of an element in an array
------------------------------------

-->Deleting an element involves removing an element at a specific position and shifting the subsequent elements to fill the gap.

int[] arr = {10,20,30,40,50};
int position = 2;

for(int i=position; i<arr.length-1;i++){
    arr[i] = arr[i+1];
}
for (int num : arr) {
    System.out.println(num);
}
--------------------------------------------------------/.....................................................................
Searching of an element in an array
------------------------------------

--> Searching involves finding the position of an element in the array.
--> There are different search algorithms, such as linear search and binary search.

    Linear Search --> It sequentially checks each element of the array until a match is found or the whole array is to be
                      searched.
    
    Pseudo code for liner search
    --------------------------------
    function linerSearch(a: list of element, target: item to search)
        n = length(a);
        for i to n-1
            if a[i] equals target
                return i; // return the index of the target element.
            end if
        end for
        return -1; // return -1 if the target element is not in the list
    end function

    Binary Search --> it is an efficient algorithms to find the target value in a sorted array by repeatedly dividing the
                      the search interval in half.

    Pseudo code for binary search.
    --------------------------------

    --> Iterative version

        function binarySearch(a: list of element, target: item to search)
            left = 0;
            right = a.length-1;

            while left <= right
                mid = left + (right - left) / 2;
                if(a[mid] equals target)
                    return mid; // return the index where the target element is found
                else if(target > arr[mid])
                    left = mid + 1 //continue searching in the right half 
                else
                    right = mid - 1; //continue searching in the left half
                end if
            end while
            return -1; // return -1 if the target element is not in the list
        end function
            

    --> Recursive version
        function binarySearch(a: list of element, target: item to search. left: left most element of list, 
                              right: right most element of list)
            if left > right
                return -1; // return -1 if the list is invalid in any case
            mid = left + (right - left) / 2

            if(a[mid] = target)
                return mid;
            else if (a[mid] < target)
                binarySearch(a,target,mid+1,right)
            else
                binarySearch(A,target,mid-1,left)

---------------------------------------------------------/.....................................................................

------------------------------------------------------Arrays in java-----------------------------------------------------------

Creating, Initializing, and Accessing an Arrays
------------------------------------------------

One-Dimensional Arrays --> The general form of a one-dimensional array declaration is 

-- type var-name[];
-- type[] var-name;

Instantiating an Array in Java
--------------------------------

When an array is declared, only a reference of an array is created. To create or give memory to the array, you create an array like this: The general form of new as it applies to one-dimensional arrays appears as follows: 

var-name = new type [size];

Accessing Java Array Elements using for Loop
----------------------------------------------

Each element in the array is accessed via its index. The index begins with 0 and ends at (total array size)-1. All the elements of array can be accessed using Java for Loop.

 // accessing the elements of the specified array
for (int i = 0; i < arr.length; i++)
             System.out.println("Element at index " + i + " : "+ arr[i]);

Multidimensional Arrays in Java
--------------------------------
Multidimensional arrays are arrays of arrays with each element of the array holding the reference of other arrays. These are also known as Jagged Arrays. A multidimensional array is created by appending one set of square brackets ([]) per dimension. 

Syntax of Java Multidimensional Array
There are 2 methods to declare Java Multidimensional Arrays as mentioned below:

-- datatype [][] arrayrefvariable;
-- datatype arrayrefvariable[][];

Frequently Asked Questions in Java Arrays


What happens if we try to access elements outside the array size?

JVM throws ArrayIndexOutOfBoundsException to indicate that the array has been accessed with an illegal index. The index is either negative or greater than or equal to the size of an array.

Which is the direct superclass of an array in Java?

An Object is direct superclass of an array in Java.

---------------------------------------------------------/.....................................................................


Time Complexity
----------------
Time complexity is a way to describe the amount of time an algorithm takes to run as a function of the size of its input. It gives an upper bound on the running time of an algorithm, helping us understand the worst-case scenario.

Common Time Complexities
-------------------------
1. O(1) - Constant Time: The running time does not depend on the size of the input. Example: Accessing an element in an 
          array by index.
2. O(n) - Linear Time: The running time grows linearly with the input size. Example: Iterating through all elements of an array.
3. O(n^2) - Quadratic Time: The running time grows quadratically with the input size. Example: Nested loops over an array.
4. O(log n) - Logarithmic Time: The running time grows logarithmically with the input size. Example: Binary search in 
               sorted array.
5. O(n log n) - Linearithmic Time: The running time grows linearly with an additional logarithmic factor. Example: Merge sort and quicksort.